[{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://gbasulto.github.io/ERDbuilder/articles/order_of_entities.html","id":"us-senate-bills","dir":"Articles","previous_headings":"","what":"US Senate Bills","title":"Order of Entities","text":"example, US Senate bill data Session 115 utilized; downloaded incidentally package. data pre-processed convenient rectangular structure. first five records three tables displayed .","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/articles/order_of_entities.html","id":"erds","dir":"Articles","previous_headings":"","what":"ERDs","title":"Order of Entities","text":"three entities: cosponsors, legislators, bills. cosponsor’s data linked legislators bills, legislators bills directly related. Figure 1 produced linking cosponsors’ table legislators bills relationships list, like code . complete example code section. Figure 2 links legislators cosponsors, cosponsors bills. achieved linking legislators cosponsors first, cosponsors bills relationships list, shown code . complete example code section. Finally, Figure 3 produced similar fashion, reverse order; relationships list definition shown code . complete example code section.","code":"relationships <- list(   Cosponsors = list(     Legislators = list(id = \"id\", relationship = c(\">0\", \"||\")),     Bills = list(bill = \"bill\", relationship = c(\">|\", \"||\"))   ) ) relationships <- list(   Legislators = list(     Cosponsors = list(id = \"id\", relationship = c(\"||\", \"0<\"))   ),   Cosponsors = list(     Bills = list(bill = \"bill\", relationship = c(\">|\", \"||\"))   ) ) relationships <- list(     Bills = list(     Cosponsors = list(bill = \"bill\", relationship = c(\"||\", \"|<\"))   ),   Cosponsors = list(     Legislators = list(id = \"id\", relationship = c(\">0\", \"||\"))   ) )"},{"path":"https://gbasulto.github.io/ERDbuilder/articles/order_of_entities.html","id":"code","dir":"Articles","previous_headings":"","what":"Code","title":"Order of Entities","text":"","code":"## Load packages library(ERDbuilder) library(incidentally) library(janitor) library(dplyr) library(tidyr) library(tibble) library(gt)  # https://cran.r-project.org/web/packages/incidentally/vignettes/congress.html  ## Download data for example I <- incidence.from.congress(   session = 115,    types = c(\"sres\"),    areas = c(\"All\"),    format = \"data\",    narrative = TRUE)   ## Define entities. Cosponsors table required some formatting. legislators_tbl <- I$legislator |> as_tibble() bills_tbl <- I$bills |> as_tibble() |> clean_names() cosponsors_tbl <-    I$matrix |>    as.data.frame() |>   rownames_to_column(var = \"name\") |>    pivot_longer(-name, names_to = \"bill\", values_to = \"sponsored\") |>    filter(sponsored == 1) |>    left_join(legislators_tbl, by = join_by(name)) |>    select(id, bill)  ## Show the first five records of every entity my_gt <- function(df) {   df |>      gt() |>     tab_style(       style = cell_fill(color = \"darkolivegreen1\"),       locations = cells_column_labels()     ) }  gt_group(   cosponsors_tbl |> head(5) |> my_gt(),   legislators_tbl |> head(5) |> my_gt(),   bills_tbl |> head(5) |> my_gt() )   ## Figure 1 ## Define first ERD: cosponsors linked to bills and legislators relationships <- list(   Cosponsors = list(     Legislators = list(id = \"id\", relationship = c(\">0\", \"||\")),     Bills = list(bill = \"bill\", relationship = c(\">|\", \"||\"))   ) )  ## Create ERD erd <- create_erd(   list(     Cosponsors = cosponsors_tbl,      Legislators = legislators_tbl,      Bills = bills_tbl   ),   relationships )  ## Render ERD render_erd(erd, label_distance = 0)  ## Figure 2 ###   Legislators -> Cosponsors -> Bills  relationships <- list(   Legislators = list(     Cosponsors = list(id = \"id\", relationship = c(\"||\", \"0<\"))   ),   Cosponsors = list(     Bills = list(bill = \"bill\", relationship = c(\">|\", \"||\"))   ) )  erd <- create_erd(   list(     Cosponsors = cosponsors_tbl,      Legislators = legislators_tbl,      Bills = bills_tbl   ),   relationships )  render_erd(erd, label_distance = 0)  ## Figure 3 ### Bills -> Cosponsors -> Legislators  relationships <- list(     Bills = list(     Cosponsors = list(bill = \"bill\", relationship = c(\"||\", \"|<\"))   ),   Cosponsors = list(     Legislators = list(id = \"id\", relationship = c(\">0\", \"||\"))   ) )  erd <- create_erd(   list(     Cosponsors = cosponsors_tbl,      Legislators = legislators_tbl,      Bills = bills_tbl   ),   relationships )  render_erd(erd, label_distance = 0)"},{"path":"https://gbasulto.github.io/ERDbuilder/articles/step_by_step.html","id":"define-data","dir":"Articles","previous_headings":"","what":"Define data","title":"Step by Step","text":"Hypothetical course data college.","code":"# Load Packages -----------------------------------------------------------  library(ERDbuilder) library(gt) library(dplyr)  # Define entities ---------------------------------------------------------  students_tbl <- data.frame(   st_id = c(\"hu1\", \"de2\", \"lo3\"),   dep_id = c(\"water\", \"evil\", \"values\"),   student = c(\"Huey\", \"Dewey\", \"Louie\"),   email = c(\"hubert.duck\", \"dewfort.duck\", \"llewellyn.duck\"),   dob = c(\"04-15\", \"04-15\", \"04-15\") )  courses_tbl <- data.frame(   crs_id = c(\"water101\", \"evil205\", \"water202\"),   fac_id = c(\"02do\", \"03pe\", \"04mi\"),   dep_id = c(\"water\", \"evil\", \"water\"),   course = c(\"Swimming\", \"Human-chasing\", \"Dives\") )  enrollment_tbl <- data.frame(   crs_id = c(\"water101\", \"evil205\", \"evil205\", \"water202\"),   st_id = c(\"hu1\", \"hu1\", \"de2\", \"de2\"),   final_grade = c(\"B\", \"A\", \"A\", \"F\") )  department_tbl <- data.frame(   dep_id = c(\"water\", \"evil\", \"values\"),   department = c(\"Water activities\", \"Evil procurement\", \"Good values\") )  faculty_tbl <- data.frame(   faculty_name = c(\"Scrooge McDuck\", \"Donald\", \"Pete\", \"Mickey\"),   title = c(\"Emeritus\", \"Full\", \"Assistant\", \"Full\"),   fac_id = c(\"01sc\", \"02do\", \"03pe\", \"04mi\"),   dep_id = c(\"water\", \"water\", \"evil\", \"values\") )   my_gt <- function(df) {   df |>      gt() |>     tab_style(       style = cell_fill(color = \"darkolivegreen1\"),       locations = cells_column_labels()     ) }  gt_group(   my_gt(students_tbl),   my_gt(courses_tbl),   my_gt(enrollment_tbl),   my_gt(department_tbl),   my_gt(faculty_tbl) )"},{"path":"https://gbasulto.github.io/ERDbuilder/articles/step_by_step.html","id":"desired-erd","dir":"Articles","previous_headings":"","what":"Desired ERD","title":"Step by Step","text":"following code like end .","code":"## Define relationships relationships <- list(   courses = list(     enrollment = list(crs_id = \"crs_id\", relationship = c(\"||\", \"|<\")),     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\")),     faculty = list(fac_id = \"fac_id\", relationship = c(\">0\", \"||\"))   ),   enrollment = list(     students = list(st_id = \"st_id\", relationship = c(\">0\", \"||\")     )   ),   students = list(     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\"))   ),   faculty = list(     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\"))   ) )  ## Create ERD object erd_object <-   create_erd(     list(       students = students_tbl,       courses = courses_tbl,       enrollment = enrollment_tbl,       department = department_tbl,       faculty = faculty_tbl     ),     relationships)  ## Render ERD render_erd(erd_object, label_distance = 0, label_angle = 15, n = 20)"},{"path":"https://gbasulto.github.io/ERDbuilder/articles/step_by_step.html","id":"step-1-display-all-entities","dir":"Articles","previous_headings":"","what":"Step 1: Display all entities","title":"Step by Step","text":"first step print nodes entities’ attributes, even yet connected. Observe relationship list empty.","code":"## Define relationships relationships <- list()  ## Create ERD object erd_object <-   create_erd(     list(       students = students_tbl,       courses = courses_tbl,       enrollment = enrollment_tbl,       department = department_tbl,       faculty = faculty_tbl     ),     relationships)  ## Render ERD render_erd(erd_object, label_distance = 0, label_angle = 15, n = 20)"},{"path":"https://gbasulto.github.io/ERDbuilder/articles/step_by_step.html","id":"step-2-define-relationships","dir":"Articles","previous_headings":"","what":"Step 2: Define relationships","title":"Step by Step","text":"step, relationship entities established, although nature relationships yet specified. two attempts establish relationships; first discarded since graph wide. second attempt solves changing order relationships specified. vignette “Order Entities” provides details tune relationships.","code":"## Define relationships: ugly attempt relationships <- list(   courses = list(     enrollment = list(),     department = list(),     faculty = list()   ),   enrollment = list(     students = list()   ),   students = list(     department = list()   ),   department = list(     faculty = list()   ) )  erd_object <-   create_erd(     list(       students = students_tbl,       courses = courses_tbl,       enrollment = enrollment_tbl,       department = department_tbl,       faculty = faculty_tbl     ),     relationships)  render_erd(erd_object, label_distance = 0, label_angle = 15, n = 20) # 2. Define Relationships: improved example  ## Define relationships relationships <- list(   courses = list(     enrollment = list(),     department = list(),     faculty = list()   ),   enrollment = list(     students = list()   ),   students = list(     department = list()   ),   faculty = list(     department = list()   ) )  erd_object <-   create_erd(     list(       students = students_tbl,       courses = courses_tbl,       enrollment = enrollment_tbl,       department = department_tbl,       faculty = faculty_tbl     ),     relationships)  render_erd(erd_object, label_distance = 0, label_angle = 15, n = 20)"},{"path":"https://gbasulto.github.io/ERDbuilder/articles/step_by_step.html","id":"step-3-highlight-key-attributes","dir":"Articles","previous_headings":"","what":"Step 3: Highlight key attributes","title":"Step by Step","text":"Specify keys allow joining tables. change font attributes bold put top pf node table.","code":"## Define relationships relationships <- list(   courses = list(     enrollment = list(crs_id = \"crs_id\", relationship = c(\"\", \"\")),     department = list(dep_id = \"dep_id\", relationship = c(\"\", \"\")),     faculty = list(fac_id = \"fac_id\", relationship = c(\"\", \"\"))   ),   enrollment = list(     students = list(st_id = \"st_id\", relationship = c(\"\", \"\")     )   ),   students = list(     department = list(dep_id = \"dep_id\", relationship = c(\"\", \"\"))   ),   faculty = list(     department = list(dep_id = \"dep_id\", relationship = c(\"\", \"\"))   ) )  ## Create ERD object erd_object <-   create_erd(     list(       students = students_tbl,       courses = courses_tbl,       enrollment = enrollment_tbl,       department = department_tbl,       faculty = faculty_tbl     ),     relationships)  ## Render ERD render_erd(erd_object, label_distance = 0, label_angle = 15, n = 20)"},{"path":"https://gbasulto.github.io/ERDbuilder/articles/step_by_step.html","id":"step-4-define-entity-relationships","dir":"Articles","previous_headings":"","what":"Step 4: Define entity relationships","title":"Step by Step","text":", add nature relationships following nomenclature table.","code":"## Define relationships relationships <- list(   courses = list(     enrollment = list(crs_id = \"crs_id\", relationship = c(\"||\", \"|<\")),     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\")),     faculty = list(fac_id = \"fac_id\", relationship = c(\">0\", \"||\"))   ),   enrollment = list(     students = list(st_id = \"st_id\", relationship = c(\">0\", \"||\")     )   ),   students = list(     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\"))   ),   faculty = list(     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\"))   ) )  ## Create ERD object erd_object <-   create_erd(     list(       students = students_tbl,       courses = courses_tbl,       enrollment = enrollment_tbl,       department = department_tbl,       faculty = faculty_tbl     ),     relationships)  ## Render ERD render_erd(erd_object, label_distance = 0, label_angle = 15, n = 20)"},{"path":"https://gbasulto.github.io/ERDbuilder/articles/step_by_step.html","id":"step-5-adjust-parameters","dir":"Articles","previous_headings":"","what":"Step 5: Adjust parameters","title":"Step by Step","text":"Specify symbol distance edge label_distance, angle edge labels displayed label_angle, maximum number rows node table n. latter particularly important one tables many attributes.","code":"## Define relationships relationships <- list(   courses = list(     enrollment = list(crs_id = \"crs_id\", relationship = c(\"||\", \"|<\")),     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\")),     faculty = list(fac_id = \"fac_id\", relationship = c(\">0\", \"||\"))   ),   enrollment = list(     students = list(st_id = \"st_id\", relationship = c(\">0\", \"||\")     )   ),   students = list(     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\"))   ),   faculty = list(     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\"))   ) )  ## Create ERD object erd_object <-   create_erd(     list(       students = students_tbl,       courses = courses_tbl,       enrollment = enrollment_tbl,       department = department_tbl,       faculty = faculty_tbl     ),     relationships)  ## Render ERD render_erd(erd_object, label_distance = 2, label_angle = 50, n = 2)"},{"path":"https://gbasulto.github.io/ERDbuilder/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonathan Wood. Author. Guillermo Basulto-Elias. Author, maintainer.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wood J, Basulto-Elias G (2024). ERDbuilder: Entity Relationship Diagrams Builder. R package version 1.0.0, https://gbasulto.github.io/ERDbuilder/, https://github.com/gbasulto/ERDbuilder.","code":"@Manual{,   title = {ERDbuilder: Entity Relationship Diagrams Builder},   author = {Jonathan Wood and Guillermo Basulto-Elias},   year = {2024},   note = {R package version 1.0.0, https://gbasulto.github.io/ERDbuilder/},   url = {https://github.com/gbasulto/ERDbuilder}, }"},{"path":"https://gbasulto.github.io/ERDbuilder/index.html","id":"erdbuilder","dir":"","previous_headings":"","what":"Entity Relationship Diagrams Builder","title":"Entity Relationship Diagrams Builder","text":"R package creates Entity-Relationship Diagrams (ERDs). generates traditional ERDs data frames, enabling users specify relationship cardinalities variables involved joins. package also facilitates data joins based established ERD.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/index.html","id":"package-dependencies","dir":"","previous_headings":"","what":"Package Dependencies","title":"Entity Relationship Diagrams Builder","text":"DiagrammeR dplyr","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/index.html","id":"objective","dir":"","previous_headings":"","what":"Objective","title":"Entity Relationship Diagrams Builder","text":"Create Entity Relationship Diagrams (ERD) extracting attribute names tables create complex graphs : Nodes: entity (.e., data frame) represented node. node label consists entity name attribute names within entity. Edges: Relationships entities represented edges corresponding nodes. Labels edges’ ends indicate relationship’s type cardinality.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Entity Relationship Diagrams Builder","text":"can install development version ERDbuilder like :","code":"remotes::install_github(\"gbasulto/ERDbuilder\")"},{"path":"https://gbasulto.github.io/ERDbuilder/index.html","id":"function-and-object-list","dir":"","previous_headings":"","what":"Function and Object List","title":"Entity Relationship Diagrams Builder","text":"Functions Objects “ERDbuilder” package","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/index.html","id":"example-1","dir":"","previous_headings":"","what":"Example 1","title":"Entity Relationship Diagrams Builder","text":"basic example shows solve common problem:","code":"## Load packages _______________________________________________________________ library(ERDbuilder)  ## Create datasets _____________________________________________________________  # Create dataframe \"employees\" employees <- data.frame(   emp_id = c(1, 2, 3),   name = c(\"Alice\", \"Bob\", \"Charlie\") )  # Create dataframe \"departments\" departments <- data.frame(   dept_id = c(1, 2),   dept_name = c(\"HR\", \"Engineering\") )  # Create dataframe \"assignments\" assignments <- data.frame(   emp_id = c(1, 3),   dept_id = c(1, 2) )  # Define relationships _________________________________________________________  relationships <- list(   assignments = list(     employees = list(emp_id = \"emp_id\", relationship = c(\"||\", \"||\")),     departments = list(dept_id = \"dept_id\", relationship = c(\">0\", \"||\"))   ) )  # Create ERD object ____________________________________________________________ erd_object <- create_erd(   list(     employees = employees,      departments = departments,      assignments = assignments),    relationships)  # Render the ERD graphically ___________________________________________________ edr_plot2 <- render_erd(erd_object, label_distance = 0, label_angle = -25)  # Plot ERD _____________________________________________________________________ edr_plot2 #> Google Chrome was not found. Try setting the `CHROMOTE_CHROME` environment variable to the executable of a Chromium-based browser, such as Google Chrome, Chromium or Brave. # ## Un-comment to export to TIFF ______________________________________________ # DPI = 600 # WidthCM = 38 # HeightCM = 38 #  # edr_plot2 |>  #   export_svg() |>  #   charToRaw |>  #   rsvg(width = WidthCM * (DPI / 2.54),  #        height = HeightCM *(DPI / 2.54)) |>  #   tiff::writeTIFF(\"edr_plot2.tiff\")"},{"path":"https://gbasulto.github.io/ERDbuilder/index.html","id":"example-2","dir":"","previous_headings":"","what":"Example 2","title":"Entity Relationship Diagrams Builder","text":"second example entities entity multiple attributes.","code":"## Load packages ______________________________________________________________ library(ERDbuilder) library(dplyr) library(readr)  ## Set URLs ____________________________________________________________________ data_url <- \"https://raw.githubusercontent.com/jwood-iastate/DataFiles/main/\" occ_url <- paste0(data_url, \"OCC.csv\") crash_url <- paste0(data_url, \"CRASH.csv\") distract_url <- paste0(data_url, \"DISTRACT.csv\") vehicle_url <- paste0(data_url, \"GV.csv\")    ## Load data ___________________________________________________________________ occupant_tbl <- read_csv(occ_url, show_col_types = FALSE)     # Occupant Data crash_tbl <- read_csv(crash_url, show_col_types = FALSE)      # Crash data distract_tbl <- read_csv(distract_url, show_col_types = FALSE)# Distraction data vehicle_tbl <- read_csv(vehicle_url, show_col_types = FALSE)  # Vehicle data  ## Define relationships ________________________________________________________  relationships <- list(   Crash = list(     Vehicle = list(       CASENUMBER = \"CASENUMBER\", relationship = c(\"||\", \"|<\")),     Occupant = list(       CASENUMBER = \"CASENUMBER\", relationship = c(\"||\", \"|<\")),     Distract = list(       CASENUMBER = \"CASENUMBER\", relationship = c(\"||\", \"0<\"))   ),   Vehicle = list(    # Crash = list(    #   CASENUMBER = \"CASENUMBER\", relationship = c(\"|<\", \"||\")),     Occupant = list(       CASENUMBER = \"CASENUMBER\", VEHNO = \"VEHNO\", relationship = c(\"|0\", \"0<\")),     Distract = list(       CASENUMBER = \"CASENUMBER\", VEHNO = \"VEHNO\", relationship = c(\"||\", \"0<\"))   ) )  ## Create the ERD object _______________________________________________________  erd_object <-    create_erd(     list(       Crash = crash_tbl,        Vehicle = vehicle_tbl,        Occupant = occupant_tbl,        Distract= distract_tbl),      relationships)  # Perform joins ________________________________________________________________   # Note that there will be a many-to-many relationship when joining the Distract # table since the Crash, Vehicle, and Occupant tables will have already been # joined. joined_data <-    perform_join(erd_object, c(\"Crash\", \"Vehicle\", \"Occupant\", \"Distract\")) #> Performing join: Using inner_join for table Vehicle  #> Performing join: Using inner_join for table Occupant  #> Performing join: Using inner_join for table Distract  ## Render plot _________________________________________________________________  edr_plot <-    render_erd(erd_object, label_distance = 0, label_angle = 15, n = 20)  edr_plot ## Uncomment to export to SVG __________________________________________________  # # Render the ERD graphically, save as a .tiff, then include in rendered files # library(rsvg) # library(DiagrammeRsvg) #  #  # DPI <- 600 # WidthCM <- 38 # HeightCM <- 38 #  # edr_plot |>  #   export_svg() |>  #   charToRaw() |>  #   rsvg( #     width = WidthCM * (DPI / 2.54),  #     height = HeightCM * (DPI / 2.54)) |>  #   tiff::writeTIFF(\"edr_plot.tiff\")"},{"path":"https://gbasulto.github.io/ERDbuilder/reference/create_erd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ERD Object — create_erd","title":"Create ERD Object — create_erd","text":"function serves constructor Entity-Relationship Diagram (ERD) object. object encapsulates data frames representing entities relationships entities. function takes arguments list data frames list relationships returns list object class \"ERD\".","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/reference/create_erd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ERD Object — create_erd","text":"","code":"create_erd(df_list, relationships)"},{"path":"https://gbasulto.github.io/ERDbuilder/reference/create_erd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ERD Object — create_erd","text":"df_list named list data frames, data frame represents entity ERD. names list elements correspond names entities. relationships nested named list describing relationships entities. top-level names list correspond names df_list. element list list, describing relationships corresponding entity entities. list acceptable values specified \"Details.\"","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/reference/create_erd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ERD Object — create_erd","text":"object class \"ERD\", named list containing two   elements: data_framesNamed list data frames identical df_list. relationshipNamed list relationships identical  relationships. class attribute list set \"ERD\".","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/reference/create_erd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create ERD Object — create_erd","text":"Possible values relationship element list include: \"||\"  indicates one one \">|\"  indicates one (left table) \"|<\"  indicates one (right table) \">0\"  indicates zero (left table) \"0<\"  indicates zero (right table) \"|0\"  indicates zero one (left table) \"0|\"  indicates zero one (right table) imperative names used df_list relationships consistent, used creating ERD object subsequent operations like rendering performing joins. Users can effortlessly encapsulate data relationships pertaining ERD single R object function, thereby facilitating downstream operations like rendering joining.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/reference/create_erd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ERD Object — create_erd","text":"","code":"# Load Packages -----------------------------------------------------------  library(ERDbuilder) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # Define entities ---------------------------------------------------------  students_tbl <- data.frame(   st_id = c(\"hu1\", \"de2\", \"lo3\"),   dep_id = c(\"water\", \"evil\", \"values\"),   student = c(\"Huey\", \"Dewey\", \"Louie\"),   email = c(\"hubert.duck\", \"dewfort.duck\", \"llewellyn.duck\"),   dob = c(\"04-15\", \"04-15\", \"04-15\") )  courses_tbl <- data.frame(   crs_id = c(\"water101\", \"evil205\", \"water202\"),   fac_id = c(\"02do\", \"03pe\", \"04mi\"),   dep_id = c(\"water\", \"evil\", \"water\"),   course = c(\"Swimming\", \"Human-chasing\", \"Dives\") )  enrollment_tbl <- data.frame(   crs_id = c(\"water101\", \"evil205\", \"evil205\", \"water202\"),   st_id = c(\"hu1\", \"hu1\", \"de2\", \"de2\"),   final_grade = c(\"B\", \"A\", \"A\", \"F\") )  department_tbl <- data.frame(   dep_id = c(\"water\", \"evil\", \"values\"),   department = c(\"Water activities\", \"Evil procurement\", \"Good values\") )  faculty_tbl <- data.frame(   faculty_name = c(\"Scrooge McDuck\", \"Donald\", \"Pete\", \"Mickey\"),   title = c(\"Emeritus\", \"Full\", \"Assistant\", \"Full\"),   fac_id = c(\"01sc\", \"02do\", \"03pe\", \"04mi\"),   dep_id = c(\"water\", \"water\", \"evil\", \"values\") )  head(students_tbl) #>   st_id dep_id student          email   dob #> 1   hu1  water    Huey    hubert.duck 04-15 #> 2   de2   evil   Dewey   dewfort.duck 04-15 #> 3   lo3 values   Louie llewellyn.duck 04-15 head(courses_tbl) #>     crs_id fac_id dep_id        course #> 1 water101   02do  water      Swimming #> 2  evil205   03pe   evil Human-chasing #> 3 water202   04mi  water         Dives head(enrollment_tbl) #>     crs_id st_id final_grade #> 1 water101   hu1           B #> 2  evil205   hu1           A #> 3  evil205   de2           A #> 4 water202   de2           F head(department_tbl) #>   dep_id       department #> 1  water Water activities #> 2   evil Evil procurement #> 3 values      Good values head(faculty_tbl) #>     faculty_name     title fac_id dep_id #> 1 Scrooge McDuck  Emeritus   01sc  water #> 2         Donald      Full   02do  water #> 3           Pete Assistant   03pe   evil #> 4         Mickey      Full   04mi values  ## Define relationships---------------------------------------- relationships <- list(   courses = list(     enrollment = list(crs_id = \"crs_id\", relationship = c(\"||\", \"|<\")),     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\")),     faculty = list(fac_id = \"fac_id\", relationship = c(\">0\", \"||\"))   ),   enrollment = list(     students = list(st_id = \"st_id\", relationship = c(\">0\", \"||\")     )   ),   students = list(     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\"))   ),   faculty = list(     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\"))   ) )  ## Create ERD object erd_object <-   create_erd(     list(       students = students_tbl,       courses = courses_tbl,       enrollment = enrollment_tbl,       department = department_tbl,       faculty = faculty_tbl     ),     relationships)  ## Render ERD ----------------------------------------------------------- render_erd(erd_object, label_distance = 0, label_angle = 15, n = 20)  {\"x\":{\"diagram\":\"graph erd {\\nrankdir=LR; node [shape=record]; edge[color=grey80]\\nnodesep=0.75; ranksep=1.25;\\nstudents [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>students<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>st_id<\\/b><\\/td><\\/tr><tr><td><b>dep_id<\\/b><\\/td><\\/tr><tr><td>student&nbsp;<\\/td><\\/tr><tr><td>email&nbsp;&nbsp;&nbsp;<\\/td><\\/tr><tr><td>dob&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\ncourses [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>courses<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>crs_id<\\/b><\\/td><\\/tr><tr><td><b>fac_id<\\/b><\\/td><\\/tr><tr><td><b>dep_id<\\/b><\\/td><\\/tr><tr><td>course&nbsp;<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\nenrollment [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>enrollment<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>crs_id<\\/b><\\/td><\\/tr><tr><td><b>st_id<\\/b><\\/td><\\/tr><tr><td>final_grade<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\ndepartment [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>department<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>dep_id<\\/b><\\/td><\\/tr><tr><td>department<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\nfaculty [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>faculty<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>fac_id<\\/b><\\/td><\\/tr><tr><td><b>dep_id<\\/b><\\/td><\\/tr><tr><td>faculty_name<\\/td><\\/tr><tr><td>title&nbsp;&nbsp;<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\ncourses -- enrollment[taillabel=\\\"||\\\", headlabel=\\\"|<\\\", labeldistance=0, labelangle=15];\\ncourses -- department[taillabel=\\\">|\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\ncourses -- faculty[taillabel=\\\">0\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\nenrollment -- students[taillabel=\\\">0\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\nstudents -- department[taillabel=\\\">|\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\nfaculty -- department[taillabel=\\\">|\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\nnode [shape=none, margin=0];\\nlegend [label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"3\\\" bgcolor=\\\"lightgrey\\\"><b>Nomenclature<\\/b><\\/td><\\/tr><tr><td bgcolor=\\\"grey95\\\">To Left<\\/td><td bgcolor=\\\"grey95\\\">To Right<\\/td><td bgcolor=\\\"grey95\\\">Definition<\\/td><\\/tr><tr><td>&#124;&#124;<\\/td><td>&#124;&#124;<\\/td><td>1 and only 1<\\/td><\\/tr><tr><td>&gt;&#124;<\\/td><td>&#124;&lt;<\\/td><td>1 or more<\\/td><\\/tr><tr><td>|0<\\/td><td>0|<\\/td><td>0 or 1<\\/td><\\/tr><tr><td>&gt;0<\\/td><td>0&lt;<\\/td><td>0 or more<\\/td><\\/tr><\\/table>>];}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://gbasulto.github.io/ERDbuilder/reference/perform_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Use inner join (unless the other is specified) — perform_join","title":"Use inner join (unless the other is specified) — perform_join","text":"perform_join function uses inner join unless user specifies join type.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/reference/perform_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use inner join (unless the other is specified) — perform_join","text":"","code":"perform_join(erd_object, tables_to_join, specified_joins = NULL)"},{"path":"https://gbasulto.github.io/ERDbuilder/reference/perform_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use inner join (unless the other is specified) — perform_join","text":"erd_object object class \"ERD\", encapsulates data frames relationships . object generated using create_erd function. tables_to_join character vector listing names tables join. first table list serves main table subsequent tables joined. tables joined order specified utilize relationships defined first table. specified_joins optional named list element's name corresponds table tables_to_join value specifies type join perform table. default value NULL, activates automated mode (uses inner joins).","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/reference/perform_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use inner join (unless the other is specified) — perform_join","text":"data frame resulting join operations conducted   specified tables, consistent relationships indicated ERD   object. Additionally, types joins used printed console.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/reference/perform_join.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use inner join (unless the other is specified) — perform_join","text":"orchestrates joining multiple tables based specified Entity-Relationship Diagram (ERD) object. function extracts relationships join criteria defined within ERD object executes appropriate join operations using R's dplyr package. function can operate two modes: automated user-specified joins. automated mode, join types determined relationship symbols ERD object. user-specified mode, types joins explicitly provided user. Implementation Details: - Join Variables: pair tables joined, function extracts relevant join variables ERD object. - Join Type: Depending relationship symbol associated pair tables, function decides whether perform inner join left join. decision implemented dynamically invoking corresponding dplyr function (inner_join left_join). - Aggregation: function uses .call dynamically execute appropriate join operation, accumulating result main_table variable, ultimately returned. Notes: -   function iteratively applies join operations, using first table tables_to_join main table. -   join operations performed order specified tables_to_join. -   specified_joins NULL, function operates automated mode, determining type join based relationship symbols. -   names specified_joins match table names tables_to_join user-specified mode function correctly.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/reference/perform_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use inner join (unless the other is specified) — perform_join","text":"","code":"# Load Packages -----------------------------------------------------------  library(ERDbuilder) library(dplyr)  # Define entities ---------------------------------------------------------  students_tbl <- data.frame(   st_id = c(\"hu1\", \"de2\", \"lo3\"),   dep_id = c(\"water\", \"evil\", \"values\"),   student = c(\"Huey\", \"Dewey\", \"Louie\"),   email = c(\"hubert.duck\", \"dewfort.duck\", \"llewellyn.duck\"),   dob = c(\"04-15\", \"04-15\", \"04-15\") )  courses_tbl <- data.frame(   crs_id = c(\"water101\", \"evil205\", \"water202\"),   fac_id = c(\"02do\", \"03pe\", \"04mi\"),   dep_id = c(\"water\", \"evil\", \"water\"),   course = c(\"Swimming\", \"Human-chasing\", \"Dives\") )  enrollment_tbl <- data.frame(   crs_id = c(\"water101\", \"evil205\", \"evil205\", \"water202\"),   st_id = c(\"hu1\", \"hu1\", \"de2\", \"de2\"),   final_grade = c(\"B\", \"A\", \"A\", \"F\") )  department_tbl <- data.frame(   dep_id = c(\"water\", \"evil\", \"values\"),   department = c(\"Water activities\", \"Evil procurement\", \"Good values\") )  faculty_tbl <- data.frame(   faculty_name = c(\"Scrooge McDuck\", \"Donald\", \"Pete\", \"Mickey\"),   title = c(\"Emeritus\", \"Full\", \"Assistant\", \"Full\"),   fac_id = c(\"01sc\", \"02do\", \"03pe\", \"04mi\"),   dep_id = c(\"water\", \"water\", \"evil\", \"values\") )  head(students_tbl) #>   st_id dep_id student          email   dob #> 1   hu1  water    Huey    hubert.duck 04-15 #> 2   de2   evil   Dewey   dewfort.duck 04-15 #> 3   lo3 values   Louie llewellyn.duck 04-15 head(courses_tbl) #>     crs_id fac_id dep_id        course #> 1 water101   02do  water      Swimming #> 2  evil205   03pe   evil Human-chasing #> 3 water202   04mi  water         Dives head(enrollment_tbl) #>     crs_id st_id final_grade #> 1 water101   hu1           B #> 2  evil205   hu1           A #> 3  evil205   de2           A #> 4 water202   de2           F head(department_tbl) #>   dep_id       department #> 1  water Water activities #> 2   evil Evil procurement #> 3 values      Good values head(faculty_tbl) #>     faculty_name     title fac_id dep_id #> 1 Scrooge McDuck  Emeritus   01sc  water #> 2         Donald      Full   02do  water #> 3           Pete Assistant   03pe   evil #> 4         Mickey      Full   04mi values  ## Define relationships---------------------------------------- relationships <- list(   courses = list(     enrollment = list(crs_id = \"crs_id\", relationship = c(\"||\", \"|<\")),     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\")),     faculty = list(fac_id = \"fac_id\", relationship = c(\">0\", \"||\"))   ),   enrollment = list(     students = list(st_id = \"st_id\", relationship = c(\">0\", \"||\")     )   ),   students = list(     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\"))   ),   faculty = list(     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\"))   ) )  ## Create ERD object erd_object <-   create_erd(     list(       students = students_tbl,       courses = courses_tbl,       enrollment = enrollment_tbl,       department = department_tbl,       faculty = faculty_tbl     ),     relationships)  ## Render ERD ----------------------------------------------------------- render_erd(erd_object, label_distance = 0, label_angle = 15, n = 20)  {\"x\":{\"diagram\":\"graph erd {\\nrankdir=LR; node [shape=record]; edge[color=grey80]\\nnodesep=0.75; ranksep=1.25;\\nstudents [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>students<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>st_id<\\/b><\\/td><\\/tr><tr><td><b>dep_id<\\/b><\\/td><\\/tr><tr><td>student&nbsp;<\\/td><\\/tr><tr><td>email&nbsp;&nbsp;&nbsp;<\\/td><\\/tr><tr><td>dob&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\ncourses [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>courses<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>crs_id<\\/b><\\/td><\\/tr><tr><td><b>fac_id<\\/b><\\/td><\\/tr><tr><td><b>dep_id<\\/b><\\/td><\\/tr><tr><td>course&nbsp;<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\nenrollment [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>enrollment<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>crs_id<\\/b><\\/td><\\/tr><tr><td><b>st_id<\\/b><\\/td><\\/tr><tr><td>final_grade<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\ndepartment [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>department<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>dep_id<\\/b><\\/td><\\/tr><tr><td>department<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\nfaculty [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>faculty<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>fac_id<\\/b><\\/td><\\/tr><tr><td><b>dep_id<\\/b><\\/td><\\/tr><tr><td>faculty_name<\\/td><\\/tr><tr><td>title&nbsp;&nbsp;<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\ncourses -- enrollment[taillabel=\\\"||\\\", headlabel=\\\"|<\\\", labeldistance=0, labelangle=15];\\ncourses -- department[taillabel=\\\">|\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\ncourses -- faculty[taillabel=\\\">0\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\nenrollment -- students[taillabel=\\\">0\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\nstudents -- department[taillabel=\\\">|\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\nfaculty -- department[taillabel=\\\">|\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\nnode [shape=none, margin=0];\\nlegend [label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"3\\\" bgcolor=\\\"lightgrey\\\"><b>Nomenclature<\\/b><\\/td><\\/tr><tr><td bgcolor=\\\"grey95\\\">To Left<\\/td><td bgcolor=\\\"grey95\\\">To Right<\\/td><td bgcolor=\\\"grey95\\\">Definition<\\/td><\\/tr><tr><td>&#124;&#124;<\\/td><td>&#124;&#124;<\\/td><td>1 and only 1<\\/td><\\/tr><tr><td>&gt;&#124;<\\/td><td>&#124;&lt;<\\/td><td>1 or more<\\/td><\\/tr><tr><td>|0<\\/td><td>0|<\\/td><td>0 or 1<\\/td><\\/tr><tr><td>&gt;0<\\/td><td>0&lt;<\\/td><td>0 or more<\\/td><\\/tr><\\/table>>];}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}  # Perform joins -----------------------------------------------------------  perform_join(erd_object, c(\"courses\", \"enrollment\", \"department\")) #> Performing join: Using inner_join for table enrollment  #> Performing join: Using inner_join for table department  #>     crs_id fac_id dep_id        course st_id final_grade       department #> 1 water101   02do  water      Swimming   hu1           B Water activities #> 2  evil205   03pe   evil Human-chasing   hu1           A Evil procurement #> 3  evil205   03pe   evil Human-chasing   de2           A Evil procurement #> 4 water202   04mi  water         Dives   de2           F Water activities"},{"path":"https://gbasulto.github.io/ERDbuilder/reference/render_erd.html","id":null,"dir":"Reference","previous_headings":"","what":"Render ERD — render_erd","title":"Render ERD — render_erd","text":"render_erd function graphically renders ERD using DiagrammeR, incorporating pseudo-nodes depict traditional ERD notations cardinality. function uses edge attributes append text labels near end edge lines. Specifically, DiagrammeR label attribute leveraged include text labels ends edges, effectively convey intended cardinality relationship information. function constructs edge labels two strings representing left right relationship attributes.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/reference/render_erd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render ERD — render_erd","text":"","code":"render_erd(erd_object, label_distance = 2.5, label_angle = 45, n = 10)"},{"path":"https://gbasulto.github.io/ERDbuilder/reference/render_erd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render ERD — render_erd","text":"erd_object object class \"ERD\", generated using link{create_erd} function. object encapsulates data frames representing entities relationships entities. label_distance numeric value specifies distance edge labels lines connecting nodes. default value 2.5. label_angle numeric value specifies angle edge labels displayed. default value 45 degrees. n maximum number rows table. tables add columns show variables tables `n` rows.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/reference/render_erd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render ERD — render_erd","text":"DiagrammeR graph object representing ERD.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/reference/render_erd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Render ERD — render_erd","text":"function responsible graphically rendering Entity-Relationship Diagram (ERD) based object class \"ERD\". function leverages DiagrammeR package generate graph visually represents entities relationships contained within ERD object. entities represented nodes, relationships edges. render_erd function thus provides robust mechanism visually representing ERD based structured data within R environment. converting ERD object graphical form, function aids clearer understanding communication complex data relationships. Nodes: entity (.e., data frame) represented node. node label consists entity name attribute names within entity. Edges: Relationships entities represented edges corresponding nodes. Labels ends edges indicate type cardinality relationship. label_distance label_angle parameters control presentation edge labels ERD minimize overlap improve readability. function uses loop iterate entities relationships, constructing necessary DiagrammeR code render element. nodesep ranksep parameters DiagrammeR code control node spacing rendered ERD, making easier visualize complex ERDs.","code":""},{"path":"https://gbasulto.github.io/ERDbuilder/reference/render_erd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render ERD — render_erd","text":"","code":"# Load Packages -----------------------------------------------------------  library(ERDbuilder) library(dplyr)  # Define entities ---------------------------------------------------------  students_tbl <- data.frame(   st_id = c(\"hu1\", \"de2\", \"lo3\"),   dep_id = c(\"water\", \"evil\", \"values\"),   student = c(\"Huey\", \"Dewey\", \"Louie\"),   email = c(\"hubert.duck\", \"dewfort.duck\", \"llewellyn.duck\"),   dob = c(\"04-15\", \"04-15\", \"04-15\") )  courses_tbl <- data.frame(   crs_id = c(\"water101\", \"evil205\", \"water202\"),   fac_id = c(\"02do\", \"03pe\", \"04mi\"),   dep_id = c(\"water\", \"evil\", \"water\"),   course = c(\"Swimming\", \"Human-chasing\", \"Dives\") )  enrollment_tbl <- data.frame(   crs_id = c(\"water101\", \"evil205\", \"evil205\", \"water202\"),   st_id = c(\"hu1\", \"hu1\", \"de2\", \"de2\"),   final_grade = c(\"B\", \"A\", \"A\", \"F\") )  department_tbl <- data.frame(   dep_id = c(\"water\", \"evil\", \"values\"),   department = c(\"Water activities\", \"Evil procurement\", \"Good values\") )  faculty_tbl <- data.frame(   faculty_name = c(\"Scrooge McDuck\", \"Donald\", \"Pete\", \"Mickey\"),   title = c(\"Emeritus\", \"Full\", \"Assistant\", \"Full\"),   fac_id = c(\"01sc\", \"02do\", \"03pe\", \"04mi\"),   dep_id = c(\"water\", \"water\", \"evil\", \"values\") )  head(students_tbl) #>   st_id dep_id student          email   dob #> 1   hu1  water    Huey    hubert.duck 04-15 #> 2   de2   evil   Dewey   dewfort.duck 04-15 #> 3   lo3 values   Louie llewellyn.duck 04-15 head(courses_tbl) #>     crs_id fac_id dep_id        course #> 1 water101   02do  water      Swimming #> 2  evil205   03pe   evil Human-chasing #> 3 water202   04mi  water         Dives head(enrollment_tbl) #>     crs_id st_id final_grade #> 1 water101   hu1           B #> 2  evil205   hu1           A #> 3  evil205   de2           A #> 4 water202   de2           F head(department_tbl) #>   dep_id       department #> 1  water Water activities #> 2   evil Evil procurement #> 3 values      Good values head(faculty_tbl) #>     faculty_name     title fac_id dep_id #> 1 Scrooge McDuck  Emeritus   01sc  water #> 2         Donald      Full   02do  water #> 3           Pete Assistant   03pe   evil #> 4         Mickey      Full   04mi values  ## Define relationships---------------------------------------- relationships <- list(   courses = list(     enrollment = list(crs_id = \"crs_id\", relationship = c(\"||\", \"|<\")),     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\")),     faculty = list(fac_id = \"fac_id\", relationship = c(\">0\", \"||\"))   ),   enrollment = list(     students = list(st_id = \"st_id\", relationship = c(\">0\", \"||\")     )   ),   students = list(     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\"))   ),   faculty = list(     department = list(dep_id = \"dep_id\", relationship = c(\">|\", \"||\"))   ) )  ## Create ERD object erd_object <-   create_erd(     list(       students = students_tbl,       courses = courses_tbl,       enrollment = enrollment_tbl,       department = department_tbl,       faculty = faculty_tbl     ),     relationships)  ## Render ERD ----------------------------------------------------------- render_erd(erd_object, label_distance = 0, label_angle = 15, n = 20)  {\"x\":{\"diagram\":\"graph erd {\\nrankdir=LR; node [shape=record]; edge[color=grey80]\\nnodesep=0.75; ranksep=1.25;\\nstudents [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>students<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>st_id<\\/b><\\/td><\\/tr><tr><td><b>dep_id<\\/b><\\/td><\\/tr><tr><td>student&nbsp;<\\/td><\\/tr><tr><td>email&nbsp;&nbsp;&nbsp;<\\/td><\\/tr><tr><td>dob&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\ncourses [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>courses<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>crs_id<\\/b><\\/td><\\/tr><tr><td><b>fac_id<\\/b><\\/td><\\/tr><tr><td><b>dep_id<\\/b><\\/td><\\/tr><tr><td>course&nbsp;<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\nenrollment [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>enrollment<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>crs_id<\\/b><\\/td><\\/tr><tr><td><b>st_id<\\/b><\\/td><\\/tr><tr><td>final_grade<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\ndepartment [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>department<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>dep_id<\\/b><\\/td><\\/tr><tr><td>department<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\nfaculty [shape=none, fontsize=10, label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"1\\\" bgcolor=\\\"lightgrey\\\"><b>faculty<\\/b><\\/td><\\/tr><tr><td><table border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"0\\\"><tr><td><b>fac_id<\\/b><\\/td><\\/tr><tr><td><b>dep_id<\\/b><\\/td><\\/tr><tr><td>faculty_name<\\/td><\\/tr><tr><td>title&nbsp;&nbsp;<\\/td><\\/tr><\\/table><\\/td><\\/tr><\\/table>>];\\ncourses -- enrollment[taillabel=\\\"||\\\", headlabel=\\\"|<\\\", labeldistance=0, labelangle=15];\\ncourses -- department[taillabel=\\\">|\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\ncourses -- faculty[taillabel=\\\">0\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\nenrollment -- students[taillabel=\\\">0\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\nstudents -- department[taillabel=\\\">|\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\nfaculty -- department[taillabel=\\\">|\\\", headlabel=\\\"||\\\", labeldistance=0, labelangle=15];\\nnode [shape=none, margin=0];\\nlegend [label=<<table border=\\\"0\\\" cellborder=\\\"1\\\" cellspacing=\\\"0\\\"><tr><td colspan=\\\"3\\\" bgcolor=\\\"lightgrey\\\"><b>Nomenclature<\\/b><\\/td><\\/tr><tr><td bgcolor=\\\"grey95\\\">To Left<\\/td><td bgcolor=\\\"grey95\\\">To Right<\\/td><td bgcolor=\\\"grey95\\\">Definition<\\/td><\\/tr><tr><td>&#124;&#124;<\\/td><td>&#124;&#124;<\\/td><td>1 and only 1<\\/td><\\/tr><tr><td>&gt;&#124;<\\/td><td>&#124;&lt;<\\/td><td>1 or more<\\/td><\\/tr><tr><td>|0<\\/td><td>0|<\\/td><td>0 or 1<\\/td><\\/tr><tr><td>&gt;0<\\/td><td>0&lt;<\\/td><td>0 or more<\\/td><\\/tr><\\/table>>];}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://gbasulto.github.io/ERDbuilder/news/index.html","id":"erdbuilder-100","dir":"Changelog","previous_headings":"","what":"ERDbuilder 1.0.0","title":"ERDbuilder 1.0.0","text":"Initial CRAN submission.","code":""}]
